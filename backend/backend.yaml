AWSTemplateFormatVersion: '2010-09-09'
Description: Backend resources and pipeline for Serverless E-Commerce Platform

Parameters:
  CodeCommitConnectionArn:
    Type: String
    Description: ARN of the CodeStar connection for GitHub
  Env:
    Type: String
    Description: Deployment environment name (e.g., dev, test, prod)
    Default: test
  BackendRepoName:
    Type: String
    Description: Name of the CodeCommit repository
    Default: mystevotgit/Orderly
  BackendBranchName:
    Type: String
    Description: Branch to track in the CodeCommit repository
    Default: backend
  LambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the zipped Lambda deployment package
    Default: function.zip

Resources:
  
### S3 Bucket for Lambda Code ###
  LambdaCodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub backend-artifact-${Env}-${AWS::AccountId}-${AWS::Region}


  ### DynamoDB Table ###
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Products-${Env}
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### Lambda Function ###
  BackendLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ExpressEcommerceBackend-${Env}
      Runtime: nodejs18.x
      Handler: lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async () => {
            return {
              statusCode: 200,
              body: 'Hello from placeholder!',
            };
          };
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable

  ### Lambda Version ###
  BackendLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref BackendLambdaFunction


  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaExecutionRole-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:* 
                  - cognito-idp:* 
                  - logs:*
                Resource: '*'

  ### API Gateway (HTTP API) ###
  BackendRestApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub EcommerceBackendApi-${Env}
      ProtocolType: HTTP

  ### CodeBuild Project ###
  BackendBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub BackendBuildProject-${Env}
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: PRODUCTS_TABLE
            Value: !Ref ProductsTable
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 10


  ### CodeBuild Service Role ###
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildServiceRole-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                Resource: '*'

  ### Code pipeline service role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodePipelineServiceRole-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineDefaultPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${LambdaCodeS3Bucket}/*"
              - Effect: Allow
                Action:
                  - codebuild:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeDeployServiceRole-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Get*
                  - lambda:List*
                  - lambda:UpdateFunctionCode
                  - lambda:CreateAlias
                  - lambda:UpdateAlias
                  - lambda:DeleteAlias
                  - codedeploy:*
                  - iam:PassRole
                Resource: '*'

  LambdaCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub LambdaDeployApp-${Env}
      ComputePlatform: Lambda

  LambdaDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref LambdaCodeDeployApp
      DeploymentGroupName: !Sub LambdaDeployGroup-${Env}
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Name: live
      FunctionName: !Ref BackendLambdaFunction
      FunctionVersion: !GetAtt BackendLambdaVersion.Version
      Description: Production alias

  ### CodePipeline ###
  BackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub BackendDeployPipeline-${Env}
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipelineServiceRole
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaCodeS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref BackendRepoName
                BranchName: !Ref BackendBranchName
                OutputArtifactFormat: CODE_ZIP
              RunOrder: 1
              Region: !Ref AWS::Region
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref BackendBuildProject
              RunOrder: 1
              Region: !Ref AWS::Region
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: !Ref LambdaCodeDeployApp
                DeploymentGroupName: !Ref LambdaDeploymentGroup
              RunOrder: 1
              Region: !Ref AWS::Region
